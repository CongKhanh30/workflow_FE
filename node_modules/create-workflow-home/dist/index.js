'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var shell = _interopDefault(require('shelljs'));
var child_process = require('child_process');
var os = _interopDefault(require('os'));
var path = require('path');
var path__default = _interopDefault(path);
var fs = _interopDefault(require('fs-extra'));
var get = _interopDefault(require('lodash.get'));
var changeCase = require('change-case');

function args(args) {
  const parsedArgs = {
    named: {},
    positional: []
  };

  const argsLength = args.length;
  for (let i = 2; i < argsLength; i++) {
    const arg = args[i];
    if (arg[0] === '-') {
      const name = getArgName(arg);
      if (args[i + 1] === undefined) {
        parsedArgs.named[name] = true;
      } else {
        parsedArgs.named[name] = args[i + 1];
      }
      i++;
    } else {
      parsedArgs.positional.push(arg);
    }
  }

  return parsedArgs;
}

function getArgName(arg) {
  let sliceIndex;
  const isWordArg = arg[1] === '-';
  if (isWordArg) {
    if (arg.length === 3) throw new Error(`expected ${arg} to be a word arg`);
    sliceIndex = 2;
  } else {
    sliceIndex = 1;
  }
  return arg.slice(sliceIndex, arg.length);
}

/* eslint-disable import/prefer-default-export */

function which(cmd) {
  return shell.exec(`which ${cmd}`, { silent: true, async: false });
}

/* eslint-env node */

const platform = process.platform;

function isRunningI3() {
  try {
    child_process.execSync("i3-msg 'exec echo 1'", { stdio: 'ignore' });
    return true;
  } catch (e) {
    return false;
  }
}

function isRunningWmctrl() {
  return which('wmctrl').code === 0;
}

const wm = (() => {
  switch (platform) {
    case 'win32':
    case 'darwin':
      return 'default';
    case 'linux':
      {
        if (isRunningI3()) {
          return 'i3';
        } else if (isRunningWmctrl()) {
          return 'wmctrl';
        }
        return 'unknown';
      }
  }
  return 'unknown';
})();

const dev = process.env.WORKFLOW_DEV_MODE === 'true';
const homedir = process.env.WORKFLOW_HOME;
const devhomedir = process.env.WORKFLOW_DEV_HOME;

const { config } = args(process.argv).named;

let configPath;
let baseFolder;
(() => {
  if (dev) {
    if (devhomedir) {
      baseFolder = devhomedir;
      configPath = path.join(devhomedir, 'config.js');
    } else {
      baseFolder = path.join(__dirname, '..', '..', 'workflow-template', 'config.js');
      configPath = path.join(baseFolder, 'config.js');
    }
  } else {
    if (config) {
      baseFolder = path.dirname(config);
      configPath = config;
    } else if (homedir) {
      baseFolder = homedir;
      configPath = path.join(baseFolder, 'config.js');
    } else {
      configPath = path.join(os.homedir(), '.workflow', 'config.js');
      baseFolder = `${os.homedir()}/.workflow`;
    }
  }
})();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function createWorkflowHome(targetFolder) {
  return Promise.resolve().then(ensureTargetExists).then(createPackageJson).then(createConfigJs).then(copyStaticFiles).then(() => console.log('Initialized:', resolveTargetFolder())).catch(err => console.error(err)); // eslint-disable-line no-console

  function ensureTargetExists() {
    fs.mkdirpSync(path__default.resolve(resolveTargetFolder()));
  }

  function createPackageJson() {
    const pkgPath = resolveTarget('package.json');

    if (fs.existsSync(pkgPath)) {
      throw new Error('Upgrade existing folder is not supported');
    }

    const versions = readVersions();
    const pkgTemplatePath = resolveSource('templates', 'package.json');

    renderTemplate(pkgTemplatePath, pkgPath, versions);
  }

  function createConfigJs() {
    const configPath$$1 = resolveTarget('config.js');
    const configTemplatePath = resolveSource('templates', 'config.js.template');
    const versions = readVersions();

    renderTemplate(configTemplatePath, configPath$$1, versions);
  }

  function copyStaticFiles() {
    const source = resolveSource('static/');
    const destination = resolveTarget();

    fs.copySync(source, destination);
  }

  function readVersions() {
    if (!readVersions.versions) {
      const rootPkgPath = resolveRoot('package.json');
      const rootPkgString = fs.readFileSync(rootPkgPath, 'utf8');
      const rootPkg = JSON.parse(rootPkgString);
      const { version, devDependencies } = rootPkg;

      const workflowWmName = resolvePlatformWorkflowWm();

      readVersions.versions = _extends({}, devDependencies, {
        'workflow.home.version': version,
        'workflow.wm.name': workflowWmName,
        'workflow.wm.named-export': changeCase.pascalCase(workflowWmName),
        'workflow.wm.version': devDependencies[workflowWmName]
      });
    }

    return readVersions.versions;
  }

  function resolvePlatformWorkflowWm() {
    switch (`${platform}-${wm}`) {
      case 'linux-i3':
        return 'workflow-wm-i3';
      case 'darwin-default':
        return 'workflow-wm-osx';
      case 'win32-default':
        return 'workflow-wm-windows';
      case 'linux-default':
        return 'workflow-wm-wmctrl';
      default:
        throw new Error(`Cannot initialize platform ${platform}-${wm}`);
    }
  }

  function renderTemplate(template, path$$1, values) {
    const templateString = fs.readFileSync(template, 'utf8');

    const renderedTemplate = templateString.replace(/{{([a-z.-]*)}}/g, (_, prelude) => get(values, prelude));

    fs.writeFileSync(path$$1, renderedTemplate);
  }

  function resolveRoot(...args) {
    return path__default.join(__dirname, '..', ...args);
  }

  function resolveSource(...args) {
    return path__default.join(__dirname, '..', 'files', ...args);
  }

  function resolveTarget(...args) {
    if (args) {
      return path__default.join(resolveTargetFolder(), ...args);
    } else {
      return resolveTargetFolder();
    }
  }

  function resolveTargetFolder() {
    if (targetFolder) {
      return path__default.resolve(targetFolder);
    } else {
      return path__default.resolve();
    }
  }
}

exports.createWorkflowHome = createWorkflowHome;
