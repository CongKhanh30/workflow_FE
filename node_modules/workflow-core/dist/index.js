'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-env node */
async function resolve(resolvers, path) {
  const errors = [];
  for (let resolver of resolvers) {
    try {
      return await resolver.resolve(path);
    } catch (e) {
      errors.push(e);
    }
  }

  for (const error of errors) {
    console.error(error); // eslint-disable-line no-console
  }
  throw new Error(`Could not resolve ${path}`);
}

async function alternatives(resolvers, path) {
  const all = [];

  for (let resolver of resolvers) {
    all.push(resolver.alternatives(path));
  }

  return all;
}

/* eslint-env node */
async function load(loaders, path) {
  const errors = [];

  for (let _ref of loaders) {
    let { loader, filter } = _ref;

    if (!filter || filter(path)) {
      try {
        return await loader.load(path);
      } catch (error) {
        errors.push(error);
      }
    }
  }

  for (const error of errors) {
    console.error(error); // eslint-disable-line no-console
  }

  throw new Error('Could not load path: ' + path);
}

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

async function apply(node, transformer, args, parent = undefined) {
  let transformed = node;

  if (typeof transformer.transformBefore === 'function') {
    transformed = (await transformer.transformBefore(node, { args, parent })) || node;
  }

  let children = undefined;
  for (const child of node.children || []) {
    children = children || [];
    children.push((await apply(child, transformer, args, node)));
  }

  if (typeof transformer.transformAfter === 'function') {
    transformed = (await transformer.transformAfter(_extends({}, transformed, { children }), { args, parent })) || _extends({}, transformed, { children });
  }

  return _extends({}, transformed, { children });
}

async function transform(transforms, config, { args }) {
  let tree = config;

  for (let transformer of transforms) {
    tree = await apply(tree, transformer, args);
  }
  return tree;
}

async function apply$1(wm, flow) {
  return wm.apply(flow);
}

async function screen(wm) {
  return wm.screen();
}

function workflow({ resolvers, loaders, argumentParser, transformers, layout, wm }) {
  return {
    resolve: async path => resolve(resolvers, path),
    alternatives: async path => alternatives(resolvers, path),
    load: async path => load(loaders, path),
    parseArguments: async (flow, argv) => argumentParser.parse(flow, argv),
    transform: async (flow, args) => transform(transformers, flow, args),
    layout: async (flow, { screen: screen$$1 }) => layout.layout(flow, { screen: screen$$1 }),
    screen: async () => screen(wm),
    apply: async flow => apply$1(wm, flow)
  };
}

exports.workflow = workflow;
